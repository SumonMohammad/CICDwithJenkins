{
	"info": {
		"_postman_id": "410dc664-7a3f-4bab-918a-68e2c6b4b8b0",
		"name": "NewmanTest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29504816",
		"_collection_link": "https://restless-firefly-685329.postman.co/workspace/TVL-WEB~277653ab-32aa-4b66-8d66-7503c047e237/collection/29504816-410dc664-7a3f-4bab-918a-68e2c6b4b8b0?action=share&source=collection_link&creator=29504816"
	},
	"item": [
		{
			"name": "SignIn",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// pm.environment.unset(\"SignInAccessToken\");",
							"// pm.environment.unset(\"SignInSessionToken\");",
							"// pm.environment.unset(\"RefreshToken\");",
							"// //Removing the prestored UserID and UserMetaID here",
							"// pm.environment.unset(\"UserId\");",
							"// pm.environment.unset(\"UserMetaID\");",
							"// pm.environment.unset(\"devUserEmail\");",
							"// pm.environment.unset(\"UserClientCode\");",
							"// pm.environment.unset(\"userBoAccountNo\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const body = pm.response.text();\r",
							"const bodydata = JSON.parse(body);\r",
							"sessionToken = bodydata.data.session;\r",
							"console.log(\"Session Token is: \" + sessionToken);\r",
							"pm.environment.set(\"SignInSessionToken\", sessionToken);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"identifier\": \"{{devUserPhone}}\",\n    \"countryCode\": \"880\",\n    \"identifier_type\": \"phone\",\n    \"password\": \"{{devPassword}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{tvl_url}}/api/v1/auth/login",
					"host": [
						"{{tvl_url}}"
					],
					"path": [
						"api",
						"v1",
						"auth",
						"login"
					]
				},
				"description": "### Auth Login\n\nThis endpoint is used to authenticate and login a user.\n\n**HTTP Request**  \n`POST {{api_url}}/api/v1/auth/login`\n\n**Request Body**\n\n- `identifier` (text, required): The identifier of the user.\n- `countryCode` (text, required): The country code of the user's phone number.\n- `identifier_type` (text, required): The type of identifier used for login.\n- `password` (text, required): The user's password.\n    \n\n**Response**\n\n- Status: 200 OK\n- `code` (number): The status code of the response.\n- `data.session` (text): The session token for the authenticated user."
			},
			"response": []
		},
		{
			"name": "SingInOtp",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const body = pm.response.text();\r",
							"const bodydata = JSON.parse(body);\r",
							"refreshToken = bodydata.data.refresh;\r",
							"var SignInAccessToken = bodydata.data.access;\r",
							"console.log(\"Refresh Token is: \" + refreshToken);\r",
							"pm.environment.set(\"SignInAccessToken\", SignInAccessToken);\r",
							"console.log(\"access Token is: \" + SignInAccessToken);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"code\": \"{{devOtp}}\",\n    \"session\": \"{{SignInSessionToken}}\",\n    \"deviceInfo\": {\n        \"country\": \"BD\",\n        \"deviceModel\": \"M1 chip\",\n        \"deviceName\": \"TVL Macbook-pro\",\n        \"deviceId\": \"1f930014983c5e17d68df9c7f501cc49\",\n        \"platform\": \"ios\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{tvl_url}}/api/v1/auth/login/otp",
					"host": [
						"{{tvl_url}}"
					],
					"path": [
						"api",
						"v1",
						"auth",
						"login",
						"otp"
					]
				},
				"description": "### Auth Login OTP\n\nThis endpoint is used to authenticate the user by providing a one-time password (OTP).\n\n#### Request Body\n\n- `code` (string, required): The one-time password provided by the user.\n- `session` (string, required): The session identifier fetched from sign-in session.\n    \n- `deviceInfo` (object, required): Information about the user's device.\n    - `country` (string, required): The country of the user's device.\n    - `deviceModel` (string, required): The model of the user's device.\n    - `deviceName` (string, required): The name of the user's device.\n    - `deviceId` (string, required): The unique identifier of the user's device.\n    - `platform` (string, required): The platform of the user's device.\n\n#### Response\n\n- Status: 200 OK\n- `code` (number): The status code of the response.\n- `data` (object): The data object containing the following:\n    - `refresh` (string): The refresh token for accessing the API.\n    - `access` (string): The access token for accessing the API.\n    - `accessExpiredAt` (string): The expiration time for the access token."
			},
			"response": []
		},
		{
			"name": "ValidateToken",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const body = pm.response.text();\r",
							"const bodydata = JSON.parse(body);\r",
							"\r",
							"var numericPattern = /^[-0-9]+$/;\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"code\": {\r",
							"            \"type\": \"integer\"\r",
							"        }\r",
							"    },\r",
							"    \"additionalProperties\": false,\r",
							"    \"required\": [\r",
							"        \"code\"\r",
							"    ]\r",
							"}\r",
							"\r",
							"pm.test('Validating Schema to give proper responses', () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"})\r",
							"\r",
							"pm.test(\"Validating Token With Response Code 0\", () => {\r",
							"    pm.expect(bodydata.code).to.be.equal(0);\r",
							"    pm.expect(bodydata.code).to.be.a('number');\r",
							"    pm.expect(bodydata).to.be.an('object');\r",
							"    pm.expect(bodydata.code).to.exist;\r",
							"    pm.expect(bodydata.code).to.match(numericPattern);\r",
							"});\r",
							"\r",
							"pm.test(\"Check for any unexpected fields in the response\", function () {\r",
							"    pm.expect(bodydata).to.be.an('object').that.does.not.include.any.keys('data');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"access\": \"{{SignInAccessToken}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{tvl_url}}/api/v1/auth/validate-access-token",
					"host": [
						"{{tvl_url}}"
					],
					"path": [
						"api",
						"v1",
						"auth",
						"validate-access-token"
					]
				},
				"description": "This endpoint is used to validate an access token via an HTTP POST request to {{api_url}}/api/v1/auth/validate-access-token.\n\n### Request Body\n\n- access (text, required): The access token to be validated.\n    \n\n### Response\n\n- Status: 200 OK\n- code (number): Indicates the result of the access token validation. A code of 0 typically indicates a successful validation."
			},
			"response": [
				{
					"name": "success",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"access\": \"{{SignInAccessToken}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{tvl_url}}/api/v1/auth/validate-access-token",
							"host": [
								"{{tvl_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"validate-access-token"
							]
						},
						"description": "This endpoint is used to validate an access token via an HTTP POST request to {{api_url}}/api/v1/auth/validate-access-token.\n\n### Request Body\n\n- access (text, required): The access token to be validated.\n    \n\n### Response\n\n- Status: 200 OK\n- code (number): Indicates the result of the access token validation. A code of 0 typically indicates a successful validation."
					},
					"_postman_previewlanguage": "",
					"header": "",
					"cookie": [],
					"body": ""
				},
				{
					"name": "failed",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"access\": \"{{SignInAccessToken}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{tvl_url}}/api/v1/auth/validate-access-token",
							"host": [
								"{{tvl_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"validate-access-token"
							]
						},
						"description": "This endpoint is used to validate an access token via an HTTP POST request to {{api_url}}/api/v1/auth/validate-access-token.\n\n### Request Body\n\n- access (text, required): The access token to be validated.\n    \n\n### Response\n\n- Status: 200 OK\n- code (number): Indicates the result of the access token validation. A code of 0 typically indicates a successful validation."
					},
					"_postman_previewlanguage": "",
					"header": "",
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "SignOut",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();",
							"const body = pm.response.text();",
							"const bodydata = JSON.parse(body);",
							"",
							"var numericPattern = /^[-0-9]+$/;",
							"",
							"const schema = {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"        \"code\": {",
							"            \"type\": \"integer\"",
							"        }",
							"    },",
							"    \"additionalProperties\": false,",
							"    \"required\": [",
							"        \"code\"",
							"    ]",
							"}",
							"",
							"pm.test('Validating Schema to give proper responses', () => {",
							"    pm.response.to.have.jsonSchema(schema);",
							"})",
							"",
							"pm.test(\"Validating Token With Response Code 0\", () => {",
							"    pm.expect(bodydata.code).to.be.equal(0);",
							"    pm.expect(bodydata.code).to.be.a('number');",
							"    pm.expect(bodydata).to.be.an('object');",
							"    pm.expect(bodydata.code).to.exist;",
							"    pm.expect(bodydata.code).to.match(numericPattern);",
							"});",
							"",
							"pm.test(\"Check for any unexpected fields in the response\", function () {",
							"    pm.expect(bodydata).to.be.an('object').that.does.not.include.any.keys('data');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"access\" : \"{{SignInAccessToken}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{tvl_url}}/api/v1/auth/signout",
					"host": [
						"{{tvl_url}}"
					],
					"path": [
						"api",
						"v1",
						"auth",
						"signout"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"var itemsArray = [1899,",
					"    1976,",
					"    1913,",
					"    1924,",
					"    1889,",
					"    2002,",
					"    1981,",
					"    1580,",
					"    1859,",
					"    1697,",
					"    1734,",
					"    1741,",
					"    1865,",
					"    1794,",
					"    1893,",
					"    1765,",
					"    1883,",
					"    1599,",
					"    1877,",
					"    1732,",
					"    1742,",
					"    1764,",
					"    1696,",
					"    1812,",
					"    1851,",
					"    1689,",
					"    1887,",
					"    1885,",
					"    1815,",
					"    1786,",
					"    1927,",
					"    1844,",
					"    1949,",
					"    1951,",
					"    1856,",
					"    1713,",
					"    1934,",
					"    1720,",
					"    1771,",
					"    1825,",
					"    1965,",
					"    1808,",
					"    1774,",
					"    1739,",
					"    1845,",
					"    1694,",
					"    1731,",
					"    2244,",
					"    1838,",
					"    1666,",
					"    2065,",
					"    1929,",
					"    1688,",
					"    1858,",
					"    1905,",
					"    1969,",
					"    1974,",
					"    2062,",
					"    1793,",
					"    1756,",
					"    1792,",
					"    1738,",
					"    1755,",
					"    1818,",
					"    1582,",
					"    1849,",
					"    1643,",
					"    1733,",
					"    1711,",
					"    1549,",
					"    1717,",
					"    1766,",
					"    1577,",
					"    1800,",
					"    1788,",
					"    1743,",
					"    1632,",
					"    1855,",
					"    1861,",
					"    1583,",
					"    1578,",
					"    2206,",
					"    1744,",
					"    1751,",
					"    1574,",
					"    1736,",
					"    1727,",
					"    1498,",
					"    1586,",
					"    1802,",
					"    1584,",
					"    1735,",
					"    1692,",
					"    1563,",
					"    1630,",
					"    1758,",
					"    1842,",
					"    1728,",
					"    1579,",
					"    1843,",
					"    1946,",
					"    1810,",
					"    1784,",
					"    2052,",
					"    2053,",
					"    2004,",
					"    1961,",
					"    2089,",
					"    2061,",
					"    1649,",
					"    1945,",
					"    1819,",
					"    1628,",
					"    1669,",
					"    1668,",
					"    1854,",
					"    1881,",
					"    1983,",
					"    1908,",
					"    2001,",
					"    1857,",
					"    1962,",
					"    1730,",
					"    1985,",
					"    1821,",
					"    1789,",
					"    1886,",
					"    1928,",
					"    1777,",
					"    1948,",
					"    1778,",
					"    1959,",
					"    1973,",
					"    1926,",
					"    1892,",
					"    2067,",
					"    1953,",
					"    2039,",
					"    2017,",
					"    1935,",
					"    1790,",
					"    2033,",
					"    1805,",
					"    1863,",
					"    1923,",
					"    2038,",
					"    1901,",
					"    1882,",
					"    1835,",
					"    1960,",
					"    1820,",
					"    1809,",
					"    1925,",
					"    1779,",
					"    2120,",
					"    2041,",
					"    1773,",
					"    2003,",
					"    2034,",
					"    2057,",
					"    2059,",
					"    2118,",
					"    1888,",
					"    1847,",
					"    1896,",
					"    1846,",
					"    1839,",
					"    1911,",
					"    1714,",
					"    1955,",
					"    1693,",
					"    1884,",
					"    1585,",
					"    1536,",
					"    1791,",
					"    1831,",
					"    1650,",
					"    1898,",
					"    1894,",
					"    1832,",
					"    1695,",
					"    1950,",
					"    1992,",
					"    1715,",
					"    1665,",
					"    1848,",
					"    1879,",
					"    1740,",
					"    1833,",
					"    1507,",
					"    1648,",
					"    1890,",
					"    1667,",
					"    1834,",
					"    1803,",
					"    1629,",
					"    1737,",
					"    1873,",
					"    1933,",
					"    1816,",
					"    1671,",
					"    1944,",
					"    2046,",
					"    1902,",
					"    2010,",
					"    2129,",
					"    2125,",
					"    2076,",
					"    2045,",
					"    2140,",
					"    2131,",
					"    1712,",
					"    2031,",
					"    1930,",
					"    1986,",
					"    1999,",
					"    2086,",
					"    2015,",
					"    2075];",
					"",
					"var randomIndex = Math.floor(Math.random() * itemsArray.length);",
					"var randomItem = itemsArray[randomIndex];",
					"",
					"pm.collectionVariables.set(\"randomTicker\", randomItem);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"//Priority List value set",
					"var values = [\"1\", \"2\", \"0\"];",
					"var tickerArray = [1899,1976,1913,1924,1889,2002,1981,1580,1859,1697,1734,1741,1865,1794,1893,1765,1883,1599,1877,1732,1742,1764,1696,1812,1851,1689,1887,1885,1815,1786,1927,1844,1949,1951,1856,1713,1934,1720,1771,1825,1965,1808,1774,1739,1845,1694,1731,2244,1838,1666,2065,1929,1688,1858,1905,1969,1974,2062,1793,1756,1792,1738,1755,1818,1582,1849,1643,1733,1711,1549,1717,1766,1577,1800,1788,1743,1632,1855,1861,1583,1578,2206,1744,1751,1574,1736,1727,1498,1586,1802,1584,1735,1692,1563,1630,1758,1842,1728,1579,1843,1946,1810,1784,2052,2053,2004,1961,2089,2061,1649,1945,1819,1628,1669,1668,1854,1881,1983,1908,2001,1857,1962,1730,1985,1821,1789,1886,1928,1777,1948,1778,1959,1973,1926,1892,2067,1953,2039,2017,1935,1790,2033,1805,1863,1923,2038,1901,1882,1835,1960,1820,1809,1925,1779,2120,2041,1773,2003,2034,2057,2059,2118,1888,1847,1896,1846,1839,1911,1714,1955,1693,1884,1585,1536,1791,1831,1650,1898,1894,1832,1695,1950,1992,1715,1665,1848,1879,1740,1833,1507,1648,1890,1667,1834,1803,1629,1737,1873,1933,1816,1671,1944,2046,1902,2010,2129,2125,2076,2045,2140,2131,1712,2031,1930,1986,1999,2086,2015,2075,1954,2047,1822,2083,1919,1915,1975,2040,1871,2223,2020,1878,2036,2064,2009,2008,2143,2056,2097,2132,2042,1891,2109,1907,1943,2043,2081,2027,2005,1941,2021,1922,2228,1912,2012,1860,2170,2102,1875,2073,2100,2106,2133,2166,1942,1940,2049,1956,1916,1971,1814,2029,1804,1994,1787,2224,1570,1914,1918,1729,1989,1984,1600,1799,2032,2078,1785,1770,1937,1978,1874,1906,1538,1750,2024,1763,1932,1880,1539,1801,1952,2026,1936,1767,2018,2124,2048,2112,2179,2167,2141,2105,2175,2173,1776,2079,2014,2085,2082,2154,2119,2151,2060,2115,1931,2139,2016,1991,2068,2138,1964,2088,2000,2101,2126,2096,2074,2174,2127,2162,2176,2093,1995,2160,1990,2069,2107,2153,3004,2110,2084,2058,2108,2044,2013,2113,1977,2188,2250,2152,1947,2142,2146,2155,1920,2186,2030,2019,2114,2028,1988,2054,1900,2099,1872,2087,1862,1670,2066,2022,1813,2072,2092,1910,1864,2098,2144,1909,1837,2035,2063,1957,1970,1551,1836,2077,1866,2023,1958,3048,1716,1876,2037,2080,2055,1841,2130,2178,2128,2161,2192,2189,2171,2163,2191,2193];",
					"",
					"var randomPriorityIndex = Math.floor(Math.random() * values.length);",
					"var randomIndex = Math.floor(Math.random() * tickerArray.length);",
					"",
					"var randomItem = tickerArray[randomIndex];",
					"",
					"",
					"pm.collectionVariables.set(\"selectRandomPriorityValue\", values[randomPriorityIndex]);",
					"pm.collectionVariables.set(\"randomTicker\", randomItem);",
					"",
					"pm.environment.get((err, environment) => {",
					"    if (err) {",
					"        console.error(err);",
					"    } else {",
					"        Object.keys(environment.values).forEach(key => {",
					"            environment.values[key].value = environment.values[key].current;",
					"        });",
					"",
					"        pm.environment.update(environment, (err) => {",
					"            if (err) {",
					"                console.error(err);",
					"            } else {",
					"                console.log(\"Initial values updated successfully!\");",
					"            }",
					"        });",
					"    }",
					"});",
					"",
					"//creating a random data type from available dataset for API input test",
					"",
					"var dataTypes = [\"string\", \"number\", \"boolean\", \"object\", \"array\"];",
					"",
					"function getRandomDataType() {",
					"    var randomIndex = Math.floor(Math.random() * dataTypes.length);",
					"    return dataTypes[randomIndex];",
					"}",
					"",
					"var dataType = getRandomDataType();",
					"switch(dataType) {",
					"    case \"string\":",
					"        pm.environment.set(\"randomData\", \"tvlqa\");",
					"        break;",
					"    case \"number\":",
					"        pm.environment.set(\"randomData\", 12345);",
					"        break;",
					"    case \"boolean\":",
					"        pm.environment.set(\"randomData\", true);",
					"        break;",
					"    case \"object\":",
					"        pm.environment.set(\"randomData\", JSON.stringify({ key: \"value\" }));",
					"        break;",
					"    case \"array\":",
					"        pm.environment.set(\"randomData\", JSON.stringify([1, 2, 3, 4, 5]));",
					"        break;",
					"}",
					"",
					"//Creating UNIX timestamp for Global Variables",
					"var currentDate = new Date();",
					"var unixTimestamp = Math.floor(currentDate.getTime() / 1000);",
					"console.log(unixTimestamp);",
					"pm.globals.set(\"LatestUnixTimestamp\", unixTimestamp);",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "randomTicker",
			"value": ""
		},
		{
			"key": "selectRandomPriorityValue",
			"value": ""
		}
	]
}